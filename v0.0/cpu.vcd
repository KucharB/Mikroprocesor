$date
	Wed Oct 30 15:41:44 2024
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module cpu_tb $end
$var wire 8 ! led [7:0] $end
$var reg 1 " clk $end
$var reg 1 # clr $end
$var reg 8 $ switch [7:0] $end
$scope module cpu1 $end
$var wire 1 " clk $end
$var wire 1 # clr $end
$var wire 8 % swiches [7:0] $end
$var wire 8 & register_file_out [7:0] $end
$var wire 2 ' reg_ad [1:0] $end
$var wire 1 ( r3_en $end
$var wire 1 ) r2_en $end
$var wire 1 * r1_en $end
$var wire 1 + r0_en $end
$var wire 8 , leds [7:0] $end
$var wire 3 - alu_operation_code [2:0] $end
$var wire 1 . aku_en $end
$var wire 5 / actual_program_counter [4:0] $end
$var wire 6 0 actual_instruction [5:0] $end
$scope module block_operation1 $end
$var wire 1 " clk $end
$var wire 8 1 out_result [7:0] $end
$var wire 8 2 operation_result [7:0] $end
$var wire 3 3 operation_code [2:0] $end
$var wire 8 4 in_b [7:0] $end
$var wire 1 5 flag_transport $end
$var wire 1 6 flag_alu_in $end
$var wire 1 . aku_enable $end
$scope module aku_unit $end
$var wire 1 " clk $end
$var wire 8 7 data_in [7:0] $end
$var wire 1 . ce $end
$var reg 8 8 data_out [7:0] $end
$upscope $end
$scope module alu_unit $end
$var wire 1 5 CY $end
$var wire 8 9 a [7:0] $end
$var wire 8 : out [7:0] $end
$var wire 3 ; op [2:0] $end
$var wire 8 < b [7:0] $end
$var wire 1 6 Ci $end
$var reg 1 = CY1 $end
$var reg 8 > out1 [7:0] $end
$var reg 9 ? sum [8:0] $end
$upscope $end
$scope module carry_reg $end
$var wire 1 " clk $end
$var wire 1 5 flag $end
$var wire 1 . ce $end
$var reg 1 6 CY $end
$upscope $end
$upscope $end
$scope module id_block $end
$var wire 6 @ instruction [5:0] $end
$var reg 1 . aku_enable $end
$var reg 3 A operation_code [2:0] $end
$var reg 1 + r0_write_enable $end
$var reg 1 * r1_write_enable $end
$var reg 1 ) r2_write_enable $end
$var reg 1 ( r3_write_enable $end
$var reg 2 B register_addr [1:0] $end
$upscope $end
$scope module program_counter $end
$var wire 1 " clk $end
$var wire 1 # clr $end
$var reg 5 C data [4:0] $end
$upscope $end
$scope module program_memory $end
$var wire 5 D adr [4:0] $end
$var reg 6 E data [5:0] $end
$upscope $end
$scope module register_file $end
$var wire 2 F addr [1:0] $end
$var wire 1 + ce0 $end
$var wire 1 * ce1 $end
$var wire 1 ) ce2 $end
$var wire 1 ( ce3 $end
$var wire 1 " clk $end
$var wire 8 G data_in [7:0] $end
$var wire 8 H data_switch [7:0] $end
$var wire 8 I register_line3 [7:0] $end
$var wire 8 J register_line2 [7:0] $end
$var wire 8 K register_line1 [7:0] $end
$var wire 8 L register_line0 [7:0] $end
$var wire 8 M data_out [7:0] $end
$scope module multiplex $end
$var wire 2 N addr [1:0] $end
$var wire 8 O d [7:0] $end
$var wire 8 P c [7:0] $end
$var wire 8 Q b [7:0] $end
$var wire 8 R a [7:0] $end
$var reg 8 S choice [7:0] $end
$upscope $end
$scope module register0 $end
$var wire 1 + ce $end
$var wire 1 " clk $end
$var wire 8 T data_in [7:0] $end
$var reg 8 U data_out [7:0] $end
$upscope $end
$scope module register1 $end
$var wire 1 * ce $end
$var wire 1 " clk $end
$var wire 8 V data_in [7:0] $end
$var reg 8 W data_out [7:0] $end
$upscope $end
$scope module register2 $end
$var wire 1 ) ce $end
$var wire 1 " clk $end
$var wire 8 X data_in [7:0] $end
$var reg 8 Y data_out [7:0] $end
$upscope $end
$scope module register3 $end
$var wire 1 ( ce $end
$var wire 1 " clk $end
$var wire 8 Z data_in [7:0] $end
$var reg 8 [ data_out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx [
b1001000 Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
b1001000 H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
x=
bx <
bx ;
bx :
bx 9
bx 8
bx 7
x6
x5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
x.
bx -
bx ,
x+
x*
x)
x(
bx '
bx &
b1001000 %
b1001000 $
0#
0"
bx !
$end
#50
0(
0)
0*
0+
b111 -
b111 3
b111 ;
b111 A
0.
b111100 0
b111100 @
b111100 E
b0 /
b0 C
b0 D
1"
#100
0"
1#
#150
b1 /
b1 C
b1 D
1"
#200
0"
#250
b10 /
b10 C
b10 D
1"
#300
0"
#350
b11 /
b11 C
b11 D
1"
#400
0"
#450
1(
b11111 0
b11111 @
b11111 E
b100 /
b100 C
b100 D
1"
#500
0"
#550
b1001000 2
b1001000 7
b1001000 :
b1001000 >
b1001000 &
b1001000 4
b1001000 <
b1001000 M
b1001000 S
b11 '
b11 B
b11 F
b11 N
1.
0(
b110 -
b110 3
b110 ;
b110 A
b11011 0
b11011 @
b11011 E
b1001000 I
b1001000 O
b1001000 [
b101 /
b101 C
b101 D
1"
#600
0"
#650
b111 -
b111 3
b111 ;
b111 A
0.
b111100 0
b111100 @
b111100 E
b110 /
b110 C
b110 D
b1001000 !
b1001000 ,
b1001000 1
b1001000 8
b1001000 9
b1001000 G
b1001000 T
b1001000 V
b1001000 X
1"
#700
0"
#750
b111100 0
b111100 @
b111100 E
b111 /
b111 C
b111 D
1"
#800
0"
#850
b111100 0
b111100 @
b111100 E
b1000 /
b1000 C
b1000 D
1"
#900
0"
#950
b111100 0
b111100 @
b111100 E
b1001 /
b1001 C
b1001 D
1"
#1000
0"
#1050
b111100 0
b111100 @
b111100 E
b1010 /
b1010 C
b1010 D
1"
#1100
0"
