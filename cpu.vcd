$date
	Mon Oct 28 10:55:43 2024
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module cpu_tb $end
$var wire 8 ! led [7:0] $end
$var reg 1 " clk $end
$var reg 1 # clr $end
$var reg 8 $ switch [7:0] $end
$scope module cpu1 $end
$var wire 1 " clk $end
$var wire 1 # clr $end
$var wire 8 % swiches [7:0] $end
$var wire 8 & register_file_out [7:0] $end
$var wire 2 ' reg_ad [1:0] $end
$var wire 1 ( r3_en $end
$var wire 1 ) r2_en $end
$var wire 1 * r1_en $end
$var wire 1 + r0_en $end
$var wire 8 , leds [7:0] $end
$var wire 1 - carry $end
$var wire 3 . alu_operation_code [2:0] $end
$var wire 1 / aku_en $end
$var wire 5 0 actual_program_counter [4:0] $end
$var wire 6 1 actual_instruction [5:0] $end
$scope module block_operation1 $end
$var wire 1 " clk $end
$var wire 8 2 out_result [7:0] $end
$var wire 8 3 operation_result [7:0] $end
$var wire 3 4 operation_code [2:0] $end
$var wire 8 5 in_b [7:0] $end
$var wire 1 / aku_enable $end
$var wire 1 - Carry_flag $end
$scope module aku_unit $end
$var wire 1 " clk $end
$var wire 8 6 data_in [7:0] $end
$var wire 1 / ce $end
$var reg 8 7 data_out [7:0] $end
$upscope $end
$scope module alu_unit $end
$var wire 8 8 a [7:0] $end
$var wire 3 9 op [2:0] $end
$var wire 8 : b [7:0] $end
$var reg 1 - CY $end
$var reg 8 ; out [7:0] $end
$var reg 9 < sum [8:0] $end
$upscope $end
$upscope $end
$scope module id_block $end
$var wire 6 = instruction [5:0] $end
$var reg 1 / aku_enable $end
$var reg 3 > operation_code [2:0] $end
$var reg 1 + r0_write_enable $end
$var reg 1 * r1_write_enable $end
$var reg 1 ) r2_write_enable $end
$var reg 1 ( r3_write_enable $end
$var reg 2 ? register_addr [1:0] $end
$upscope $end
$scope module program_counter $end
$var wire 1 " clk $end
$var wire 1 # clr $end
$var reg 5 @ data [4:0] $end
$upscope $end
$scope module program_memory $end
$var wire 5 A adr [4:0] $end
$var reg 6 B data [5:0] $end
$upscope $end
$scope module register_file $end
$var wire 2 C addr [1:0] $end
$var wire 1 + ce0 $end
$var wire 1 * ce1 $end
$var wire 1 ) ce2 $end
$var wire 1 ( ce3 $end
$var wire 1 " clk $end
$var wire 8 D data_in [7:0] $end
$var wire 8 E data_switch [7:0] $end
$var wire 8 F register_line3 [7:0] $end
$var wire 8 G register_line2 [7:0] $end
$var wire 8 H register_line1 [7:0] $end
$var wire 8 I register_line0 [7:0] $end
$var wire 8 J data_out [7:0] $end
$scope module multiplex $end
$var wire 2 K addr [1:0] $end
$var wire 8 L d [7:0] $end
$var wire 8 M c [7:0] $end
$var wire 8 N b [7:0] $end
$var wire 8 O a [7:0] $end
$var reg 8 P choice [7:0] $end
$upscope $end
$scope module register0 $end
$var wire 1 + ce $end
$var wire 1 " clk $end
$var wire 8 Q data_in [7:0] $end
$var reg 8 R data_out [7:0] $end
$upscope $end
$scope module register1 $end
$var wire 1 * ce $end
$var wire 1 " clk $end
$var wire 8 S data_in [7:0] $end
$var reg 8 T data_out [7:0] $end
$upscope $end
$scope module register2 $end
$var wire 1 ) ce $end
$var wire 1 " clk $end
$var wire 8 U data_in [7:0] $end
$var reg 8 V data_out [7:0] $end
$upscope $end
$scope module register3 $end
$var wire 1 ( ce $end
$var wire 1 " clk $end
$var wire 8 W data_in [7:0] $end
$var reg 8 X data_out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx X
b1001000 W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
b1001000 E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
x/
bx .
x-
bx ,
x+
x*
x)
x(
bx '
bx &
b1001000 %
b1001000 $
0#
0"
bx !
$end
#50
0(
0)
0*
0+
b111 .
b111 4
b111 9
b111 >
0/
b111100 1
b111100 =
b111100 B
b0 0
b0 @
b0 A
1"
#100
0"
1#
#150
b1 0
b1 @
b1 A
1"
#200
0"
#250
b10 0
b10 @
b10 A
1"
#300
0"
#350
b11 0
b11 @
b11 A
1"
#400
0"
#450
1(
b11111 1
b11111 =
b11111 B
b100 0
b100 @
b100 A
1"
#500
0"
#550
b1001000 3
b1001000 6
b1001000 ;
b1001000 &
b1001000 5
b1001000 :
b1001000 J
b1001000 P
b11 '
b11 ?
b11 C
b11 K
1/
0(
b110 .
b110 4
b110 9
b110 >
b11011 1
b11011 =
b11011 B
b1001000 F
b1001000 L
b1001000 X
b101 0
b101 @
b101 A
1"
#600
0"
#650
b111 .
b111 4
b111 9
b111 >
0/
b111100 1
b111100 =
b111100 B
b110 0
b110 @
b110 A
b1001000 !
b1001000 ,
b1001000 2
b1001000 7
b1001000 8
b1001000 D
b1001000 Q
b1001000 S
b1001000 U
1"
#700
0"
#750
b111100 1
b111100 =
b111100 B
b111 0
b111 @
b111 A
1"
#800
0"
#850
b111100 1
b111100 =
b111100 B
b1000 0
b1000 @
b1000 A
1"
#900
0"
#950
b111100 1
b111100 =
b111100 B
b1001 0
b1001 @
b1001 A
1"
#1000
0"
#1050
b111100 1
b111100 =
b111100 B
b1010 0
b1010 @
b1010 A
1"
#1100
0"
