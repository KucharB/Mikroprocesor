$date
	Wed Jan 29 01:02:22 2025
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module cpu_tb $end
$var wire 8 ! o_data [7:0] $end
$var reg 1 " clk $end
$var reg 1 # clr $end
$scope module dut $end
$var wire 1 " clk $end
$var wire 1 # clr $end
$var wire 1 $ write_to_reg_en $end
$var wire 1 % write_to_normal_aku_en $end
$var wire 3 & register_addr [2:0] $end
$var wire 4 ' op_code [3:0] $end
$var wire 8 ( op_block_in [7:0] $end
$var wire 1 ) memory_wr $end
$var wire 1 * memory_rd $end
$var wire 8 + memory_data [7:0] $end
$var wire 10 , memory_adr [9:0] $end
$var wire 1 - load_to_counter $end
$var wire 1 . dir_load $end
$var wire 8 / dir_data [7:0] $end
$var wire 8 0 aku_out [7:0] $end
$var wire 8 1 aku_in [7:0] $end
$var wire 5 2 adr_counter [4:0] $end
$var wire 16 3 actual_instruction [15:0] $end
$var wire 5 4 actual_counter_o [4:0] $end
$var reg 8 5 o_data [7:0] $end
$scope module data_mem $end
$var wire 1 " clk $end
$var wire 8 6 o_data [7:0] $end
$var wire 1 ) wr $end
$var wire 8 7 in_data [7:0] $end
$var wire 10 8 addr [9:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 9 i [31:0] $end
$upscope $end
$upscope $end
$scope module inst_dec0 $end
$var wire 16 : instruction [15:0] $end
$var reg 5 ; address_counter [4:0] $end
$var reg 1 % aku_enable $end
$var reg 1 - counter_load $end
$var reg 8 < direct_data [7:0] $end
$var reg 1 . direct_load $end
$var reg 10 = mem_adr [9:0] $end
$var reg 1 * mem_rd $end
$var reg 1 ) mem_wr $end
$var reg 4 > operation_code [3:0] $end
$var reg 1 $ reg_ce $end
$var reg 3 ? register_addr [2:0] $end
$upscope $end
$scope module mux_in_alu_data $end
$var wire 8 @ b [7:0] $end
$var wire 8 A c [7:0] $end
$var wire 8 B d [7:0] $end
$var wire 2 C sel [1:0] $end
$var wire 8 D a [7:0] $end
$var reg 8 E o_data [7:0] $end
$upscope $end
$scope module op_bl $end
$var wire 1 % aku_enable $end
$var wire 1 " clk $end
$var wire 8 F in_b [7:0] $end
$var wire 4 G operation_code [3:0] $end
$var wire 8 H out_result [7:0] $end
$var wire 8 I operation_result [7:0] $end
$var wire 1 J flag_transport $end
$var wire 1 K flag_alu_in $end
$scope module aku_unit $end
$var wire 1 % ce $end
$var wire 1 " clk $end
$var wire 8 L data_in [7:0] $end
$var reg 8 M data_out [7:0] $end
$upscope $end
$scope module alu_unit $end
$var wire 8 N a [7:0] $end
$var wire 8 O b [7:0] $end
$var wire 4 P op [3:0] $end
$var wire 8 Q out [7:0] $end
$var wire 1 K Ci $end
$var wire 1 J CY $end
$var reg 1 R CY1 $end
$var reg 8 S out1 [7:0] $end
$var reg 9 T sum [8:0] $end
$upscope $end
$scope module carry_reg $end
$var wire 1 % ce $end
$var wire 1 " clk $end
$var wire 1 J flag $end
$var reg 1 K CY $end
$upscope $end
$upscope $end
$scope module prog_counter0 $end
$var wire 1 " clk $end
$var wire 1 # clr $end
$var wire 5 U data_in [4:0] $end
$var wire 1 - load $end
$var reg 5 V data [4:0] $end
$upscope $end
$scope module prog_mem0 $end
$var wire 5 W adr [4:0] $end
$var reg 16 X data [15:0] $end
$upscope $end
$scope module rf_bl $end
$var wire 1 $ ce $end
$var wire 1 " clk $end
$var wire 8 Y data_in [7:0] $end
$var wire 3 Z reg_adr [2:0] $end
$var wire 8 [ reg_ce [7:0] $end
$var wire 8 \ data_out [7:0] $end
$scope begin gen_register[0] $end
$var parameter 2 ] i $end
$scope module reg0 $end
$var wire 1 ^ ce $end
$var wire 1 " clk $end
$var wire 8 _ data_in [7:0] $end
$var reg 8 ` data_out [7:0] $end
$upscope $end
$upscope $end
$scope begin gen_register[1] $end
$var parameter 2 a i $end
$scope module reg0 $end
$var wire 1 b ce $end
$var wire 1 " clk $end
$var wire 8 c data_in [7:0] $end
$var reg 8 d data_out [7:0] $end
$upscope $end
$upscope $end
$scope begin gen_register[2] $end
$var parameter 3 e i $end
$scope module reg0 $end
$var wire 1 f ce $end
$var wire 1 " clk $end
$var wire 8 g data_in [7:0] $end
$var reg 8 h data_out [7:0] $end
$upscope $end
$upscope $end
$scope begin gen_register[3] $end
$var parameter 3 i i $end
$scope module reg0 $end
$var wire 1 j ce $end
$var wire 1 " clk $end
$var wire 8 k data_in [7:0] $end
$var reg 8 l data_out [7:0] $end
$upscope $end
$upscope $end
$scope begin gen_register[4] $end
$var parameter 4 m i $end
$scope module reg0 $end
$var wire 1 n ce $end
$var wire 1 " clk $end
$var wire 8 o data_in [7:0] $end
$var reg 8 p data_out [7:0] $end
$upscope $end
$upscope $end
$scope begin gen_register[5] $end
$var parameter 4 q i $end
$scope module reg0 $end
$var wire 1 r ce $end
$var wire 1 " clk $end
$var wire 8 s data_in [7:0] $end
$var reg 8 t data_out [7:0] $end
$upscope $end
$upscope $end
$scope begin gen_register[6] $end
$var parameter 4 u i $end
$scope module reg0 $end
$var wire 1 v ce $end
$var wire 1 " clk $end
$var wire 8 w data_in [7:0] $end
$var reg 8 x data_out [7:0] $end
$upscope $end
$upscope $end
$scope begin gen_register[7] $end
$var parameter 4 y i $end
$scope module reg0 $end
$var wire 1 z ce $end
$var wire 1 " clk $end
$var wire 8 { data_in [7:0] $end
$var reg 8 | data_out [7:0] $end
$upscope $end
$upscope $end
$scope module multiplex $end
$var wire 8 } a [7:0] $end
$var wire 3 ~ addr [2:0] $end
$var wire 8 !" b [7:0] $end
$var wire 8 "" c [7:0] $end
$var wire 8 #" d [7:0] $end
$var wire 8 $" e [7:0] $end
$var wire 8 %" f [7:0] $end
$var wire 8 &" g [7:0] $end
$var wire 8 '" h [7:0] $end
$var reg 8 (" choice [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b111 y
b110 u
b101 q
b100 m
b11 i
b10 e
b1 a
b0 ]
$end
#0
$dumpvars
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
b0 ~
bx }
bx |
bx {
0z
bx x
bx w
0v
bx t
bx s
0r
bx p
bx o
0n
bx l
bx k
0j
bx h
bx g
0f
bx d
bx c
0b
bx `
bx _
0^
bx \
b0 [
b0 Z
bx Y
bx X
bx W
bx V
b0 U
bx00000000 T
bx S
0R
bx Q
bx P
bx O
bx N
bx M
bx L
xK
xJ
bx I
bx H
bx G
bx F
bx E
bx D
b0 C
bz B
b0 A
b0 @
b0 ?
bx >
b0 =
b0 <
b0 ;
bx :
b10000000000 9
b0 8
bx 7
b0 6
bx 5
bx 4
bx 3
b0 2
bx 1
bx 0
b0 /
0.
0-
b0 ,
b0 +
0*
0)
bx (
bx '
b0 &
0%
0$
0#
0"
bx !
$end
#50
b10101010 I
b10101010 L
b10101010 Q
b10101010 S
b10101010 (
b10101010 E
b10101010 F
b10101010 O
bx00000000 T
1%
b1 C
1.
b10101010 /
b10101010 <
b10101010 @
b1100 '
b1100 >
b1100 G
b1100 P
b1100000110101010 3
b1100000110101010 :
b1100000110101010 X
b0 4
b0 V
b0 W
1"
#100
0"
#150
b10101010 !
b10101010 5
bx00000000 T
b10101010 0
b10101010 7
b10101010 H
b10101010 M
b10101010 N
b10101010 Y
b10101010 _
b10101010 c
b10101010 g
b10101010 k
b10101010 o
b10101010 s
b10101010 w
b10101010 {
1#
1"
#200
0"
#250
bx I
bx L
bx Q
bx S
bx (
bx E
bx F
bx O
bx00000000 T
1)
b0 /
b0 <
b0 @
b0 C
0.
0%
b1110 '
b1110 >
b1110 G
b1110 P
b1110000000000000 3
b1110000000000000 :
b1110000000000000 X
b1 4
b1 V
b1 W
1"
#300
0"
#350
b10111011 I
b10111011 L
b10111011 Q
b10111011 S
b10111011 (
b10111011 E
b10111011 F
b10111011 O
bx00000000 T
1%
b1 C
1.
b10111011 /
b10111011 <
b10111011 @
0)
b1100 '
b1100 >
b1100 G
b1100 P
b1100000110111011 3
b1100000110111011 :
b1100000110111011 X
b10 4
b10 V
b10 W
b10101010 +
b10101010 6
b10101010 A
1"
#400
0"
#450
b11001100 I
b11001100 L
b11001100 Q
b11001100 S
b11001100 (
b11001100 E
b11001100 F
b11001100 O
b11001100 /
b11001100 <
b11001100 @
b1 C
1.
1%
b1100000111001100 3
b1100000111001100 :
b1100000111001100 X
b10111011 !
b10111011 5
bx00000000 T
b11 4
b11 V
b11 W
b10111011 0
b10111011 7
b10111011 H
b10111011 M
b10111011 N
b10111011 Y
b10111011 _
b10111011 c
b10111011 g
b10111011 k
b10111011 o
b10111011 s
b10111011 w
b10111011 {
1"
#500
0"
#550
b10101010 I
b10101010 L
b10101010 Q
b10101010 S
b10101010 (
b10101010 E
b10101010 F
b10101010 O
1*
b0 /
b0 <
b0 @
b10 C
0.
1%
b1010 '
b1010 >
b1010 G
b1010 P
b11001100 !
b11001100 5
bx00000000 T
b1010000000000000 3
b1010000000000000 :
b1010000000000000 X
b11001100 0
b11001100 7
b11001100 H
b11001100 M
b11001100 N
b11001100 Y
b11001100 _
b11001100 c
b11001100 g
b11001100 k
b11001100 o
b11001100 s
b11001100 w
b11001100 {
b100 4
b100 V
b100 W
1"
#600
0"
#650
1.
b10101010 /
b10101010 <
b10101010 @
b1 C
0*
1%
b1100 '
b1100 >
b1100 G
b1100 P
b1100000110101010 3
b1100000110101010 :
b1100000110101010 X
b10101010 !
b10101010 5
bx00000000 T
b101 4
b101 V
b101 W
b10101010 0
b10101010 7
b10101010 H
b10101010 M
b10101010 N
b10101010 Y
b10101010 _
b10101010 c
b10101010 g
b10101010 k
b10101010 o
b10101010 s
b10101010 w
b10101010 {
1"
#700
0"
#750
1^
bx I
bx L
bx Q
bx S
bx00000000 T
b1 [
bx (
bx E
bx F
bx O
1$
b0 /
b0 <
b0 @
b0 C
0.
0%
b1100000000000000 3
b1100000000000000 :
b1100000000000000 X
b110 4
b110 V
b110 W
1"
#800
0"
#850
0^
b0 [
b1 I
b1 L
b1 Q
b1 S
bx00000000 T
1%
b1 C
1.
b1 /
b1 <
b1 @
0$
b1 (
b1 E
b1 F
b1 O
b1100000100000001 3
b1100000100000001 :
b1100000100000001 X
b10101010 1
b10101010 D
b10101010 \
b10101010 ("
b111 4
b111 V
b111 W
b10101010 `
b10101010 }
1"
#900
0"
#950
b10101010 (
b10101010 E
b10101010 F
b10101010 O
bx I
bx L
bx Q
bx S
b0 /
b0 <
b0 @
b0 C
0.
1%
b0 '
b0 >
b0 G
b0 P
b1 !
b1 5
bx T
b0 3
b0 :
b0 X
b1 0
b1 7
b1 H
b1 M
b1 N
b1 Y
b1 _
b1 c
b1 g
b1 k
b1 o
b1 s
b1 w
b1 {
b1000 4
b1000 V
b1000 W
1"
#1000
0"
#1050
bx !
bx 5
bx T
b1001 4
b1001 V
b1001 W
bx 0
bx 7
bx H
bx M
bx N
bx Y
bx _
bx c
bx g
bx k
bx o
bx s
bx w
bx {
1"
#1100
0"
#1150
0J
b0 T
1%
b100 '
b100 >
b100 G
b100 P
b100000000000000 3
b100000000000000 :
b100000000000000 X
b1010 4
b1010 V
b1010 W
1"
#1200
0"
#1250
b10101010 I
b10101010 L
b10101010 Q
b10101010 S
b11110 2
b11110 ;
b11110 U
1-
0%
b111 '
b111 >
b111 G
b111 P
b111000000011110 3
b111000000011110 :
b111000000011110 X
b1011 4
b1011 V
b1011 W
0K
1"
#1300
0"
#1350
b0 2
b0 ;
b0 U
0-
b110 '
b110 >
b110 G
b110 P
b110000000000000 3
b110000000000000 :
b110000000000000 X
b11110 4
b11110 V
b11110 W
1"
#1400
0"
#1450
b11111 4
b11111 V
b11111 W
1"
#1500
0"
#1550
1%
b1 C
1.
b10101010 /
b10101010 <
b10101010 @
b1100 '
b1100 >
b1100 G
b1100 P
b1100000110101010 3
b1100000110101010 :
b1100000110101010 X
b0 4
b0 V
b0 W
1"
#1600
0"
#1650
1)
b0 /
b0 <
b0 @
b0 C
0.
0%
b1110 '
b1110 >
b1110 G
b1110 P
b1110000000000000 3
b1110000000000000 :
b1110000000000000 X
b10101010 !
b10101010 5
b1 4
b1 V
b1 W
b10101010 0
b10101010 7
b10101010 H
b10101010 M
b10101010 N
b10101010 Y
b10101010 _
b10101010 c
b10101010 g
b10101010 k
b10101010 o
b10101010 s
b10101010 w
b10101010 {
1"
#1700
0"
#1750
b10111011 I
b10111011 L
b10111011 Q
b10111011 S
b10111011 (
b10111011 E
b10111011 F
b10111011 O
1%
b1 C
1.
b10111011 /
b10111011 <
b10111011 @
0)
b1100 '
b1100 >
b1100 G
b1100 P
b1100000110111011 3
b1100000110111011 :
b1100000110111011 X
b10 4
b10 V
b10 W
1"
#1800
0"
#1850
b11001100 I
b11001100 L
b11001100 Q
b11001100 S
b11001100 (
b11001100 E
b11001100 F
b11001100 O
b11001100 /
b11001100 <
b11001100 @
b1 C
1.
1%
b1100000111001100 3
b1100000111001100 :
b1100000111001100 X
b10111011 !
b10111011 5
b11 4
b11 V
b11 W
b10111011 0
b10111011 7
b10111011 H
b10111011 M
b10111011 N
b10111011 Y
b10111011 _
b10111011 c
b10111011 g
b10111011 k
b10111011 o
b10111011 s
b10111011 w
b10111011 {
1"
#1900
0"
#1950
b10101010 I
b10101010 L
b10101010 Q
b10101010 S
b10101010 (
b10101010 E
b10101010 F
b10101010 O
1*
b0 /
b0 <
b0 @
b10 C
0.
1%
b1010 '
b1010 >
b1010 G
b1010 P
b11001100 !
b11001100 5
b1010000000000000 3
b1010000000000000 :
b1010000000000000 X
b11001100 0
b11001100 7
b11001100 H
b11001100 M
b11001100 N
b11001100 Y
b11001100 _
b11001100 c
b11001100 g
b11001100 k
b11001100 o
b11001100 s
b11001100 w
b11001100 {
b100 4
b100 V
b100 W
1"
#2000
0"
#2050
1.
b10101010 /
b10101010 <
b10101010 @
b1 C
0*
1%
b1100 '
b1100 >
b1100 G
b1100 P
b1100000110101010 3
b1100000110101010 :
b1100000110101010 X
b10101010 !
b10101010 5
b101 4
b101 V
b101 W
b10101010 0
b10101010 7
b10101010 H
b10101010 M
b10101010 N
b10101010 Y
b10101010 _
b10101010 c
b10101010 g
b10101010 k
b10101010 o
b10101010 s
b10101010 w
b10101010 {
1"
#2100
0"
#2150
1^
b1 [
1$
b0 /
b0 <
b0 @
b0 C
0.
0%
b1100000000000000 3
b1100000000000000 :
b1100000000000000 X
b110 4
b110 V
b110 W
1"
